# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool: SelfHostedAgent

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'  # Use the .NET 8 SDK version as needed

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration) --output $(build.artifactStagingDirectory)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Starting Git Push Process"
      
      # Initialize Git if the repository hasn't been initialized yet
      if (-not (Test-Path .git)) {
        Write-Host "Initializing Git repository..."
        git init
      }

      # Remove the Azure DevOps remote (if any) and add the GitHub remote
      Write-Host "Removing Azure DevOps remote (if it exists)..."
      git remote remove origin
      Write-Host "Adding GitHub remote..."
      git remote add origin https://$(gitHubUsername):$(gitHubPat)@github.com/yogeshkarpe-dot/learnit-api.git

      # Verify the remote URL
      Write-Host "Verifying remote URL..."
      git remote -v

      # Fetch the latest state from the GitHub repository (if needed)
      Write-Host "Fetching from GitHub..."
      git fetch origin

      # Set up Git user information for commits
      Write-Host "Setting up Git user configuration..."
      git config --global user.name 'Yogesh'

      # Ensure weâ€™re on the correct branch (main)
      Write-Host "Ensuring we're on the correct branch (main)..."
      $branchExists = git branch --list main
      if ($branchExists) {
        Write-Host "Branch 'main' exists, checking it out."
        git checkout main
      } else {
        Write-Host "Branch 'main' does not exist, creating it from the latest commit."
        git checkout -b main
      }

      # Check the status of the working directory (to make sure we have changes)
      Write-Host "Checking git status..."
      git status

      # Stage, commit, and push changes if there are any
      Write-Host "Staging changes..."
      git add .
      if (git diff --cached --quiet) {
        Write-Host 'No changes to commit.'
      } else {
        Write-Host 'Committing changes...'
        git commit -m 'Automated push from Azure DevOps pipeline'
        Write-Host 'Pushing to GitHub...'
        git push -u origin main
      }

      Write-Host "Git Push Process Completed."
  displayName: 'Push code to GitHub repository'


- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(build.artifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: Container